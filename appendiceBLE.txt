tutto il codice si trova su https://developer.android.com/guide/topics/connectivity/bluetooth-le#java

>>>> Bluetooth low energy overview <<<<
E' MOOOOOLTO lunga e discorsiva come parte, io direi di tenerla come semplice linea guida e riscrivere in poche righe le varie chiacchere introduttive.
In particolare direi di preparare un programmino funzionante e commentarlo, il grosso delle spiegazioni le mettiamo lì come commento 
e poi sulla slide mettiamo una foto del codice.


><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><

Android 4.3 (API level 18) introduces built-in platform support for Bluetooth Low Energy (BLE) in the central role and provides APIs 
that apps can use to discover devices, query for services, and transmit information.

Common use cases include the following:

-Transferring small amounts of data between nearby devices.
-Interacting with proximity sensors like Google Beacons to give users a customized experience based on their current location.

In contrast to Classic Bluetooth, Bluetooth Low Energy (BLE) is designed to provide significantly lower power consumption. 
This allows Android apps to communicate with BLE devices that have stricter power requirements, 
such as proximity sensors, heart rate monitors, and fitness devices.

Caution: When a user pairs their device with another device using BLE, the data that's communicated between the two devices is accessible to 
all apps on the user's device.
For this reason, if your app captures sensitive data, you should implement app-layer security to protect the privacy of that data.


Key terms and concepts
Here is a summary of key BLE terms and concepts:

Generic Attribute Profile (GATT)—The GATT profile is a general specification for sending and receiving short pieces of data known as "attributes" 
over a BLE link. 
All current Low Energy application profiles are based on GATT.
The Bluetooth SIG defines many profiles for Low Energy devices. 
A profile is a specification for how a device works in a particular application.
Note that a device can implement more than one profile.
For example, a device could contain a heart rate monitor and a battery level detector.
Attribute Protocol (ATT)—GATT is built on top of the Attribute Protocol (ATT). 
This is also referred to as GATT/ATT. 
ATT is optimized to run on BLE devices. 
To this end, it uses as few bytes as possible. 

Each attribute is uniquely identified by a Universally Unique Identifier (UUID), which is a standardized 128-bit format for a string ID used 
to uniquely identify information. 

The attributes transported by ATT are formatted as characteristics and services.
Characteristic—A characteristic contains a single value and 0-n descriptors that describe the characteristic's value. A characteristic can be thought of as a type, analogous to a class. 
Descriptor—Descriptors are defined attributes that describe a characteristic value. For example, a descriptor might specify a human-readable description, an acceptable range for a characteristic's value, or a unit of measure that is specific to a characteristic's value.
Service—A service is a collection of characteristics. For example, you could have a service called "Heart Rate Monitor" that includes characteristics such as "heart rate measurement." You can find a list of existing GATT-based profiles and services on bluetooth.org.
Roles and responsibilities
Here are the roles and responsibilities that apply when an Android device interacts with a BLE device:

Central vs. peripheral. This applies to the BLE connection itself. The device in the central role scans, looking for advertisement, and the device in the peripheral role makes the advertisement.
GATT server vs. GATT client. This determines how two devices talk to each other once they've established the connection.
To understand the distinction, imagine that you have an Android phone and an activity tracker that is a BLE device. The phone supports the central role; the activity tracker supports the peripheral role (to establish a BLE connection you need one of each—two things that only support peripheral couldn't talk to each other, nor could two things that only support central).

Once the phone and the activity tracker have established a connection, they start transferring GATT metadata to one another. Depending on the kind of data they transfer, one or the other might act as the server. For example, if the activity tracker wants to report sensor data to the phone, it might make sense for the activity tracker to act as the server. If the activity tracker wants to receive updates from the phone, then it might make sense for the phone to act as the server.

In the example used in this document, the Android app (running on an Android device) is the GATT client. The app gets data from the GATT server, which is a BLE heart rate monitor that supports the Heart Rate Profile. But you could alternatively design your Android app to play the GATT server role. See BluetoothGattServer for more information.

BLE permissions
In order to use Bluetooth features in your application, you must declare the Bluetooth permission BLUETOOTH. You need this permission to perform any Bluetooth communication, such as requesting a connection, accepting a connection, and transferring data.

You must also declare the ACCESS_FINE_LOCATION permission, given that LE beacons are often associated with location. Without this permission, scans won't return any results.

Note: If your app targets Android 9 (API level 28) or lower, you can declare the ACCESS_COARSE_LOCATION permission instead of the ACCESS_FINE_LOCATION permission.

If you want your app to initiate device discovery or manipulate Bluetooth settings, you must also declare the BLUETOOTH_ADMIN permission. Note: If you use the BLUETOOTH_ADMIN permission, then you must also have the BLUETOOTH permission.

Declare the permissions in your application manifest file. For example:

<uses-permission android:name="android.permission.BLUETOOTH"/>
<uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>

<!-- If your app targets Android 9 or lower, you can declare
     ACCESS_COARSE_LOCATION instead. -->
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />

If you want to declare that your app is available to BLE-capable devices only, include the following in your app's manifest:

<uses-feature android:name="android.hardware.bluetooth_le" android:required="true"/>

However, if you want to make your app available to devices that don't support BLE, you should still include this element in your app's manifest, 
but set required="false". Then at run-time you can determine BLE availability by using PackageManager.hasSystemFeature():


Set up BLE
Before your application can communicate over BLE, you need to verify that BLE is supported on the device, and if so, ensure that it is enabled. Note that this check is only necessary if <uses-feature.../> is set to false.

If BLE is not supported, then you should gracefully disable any BLE features. 
If BLE is supported, but disabled, then you can request that the user enable Bluetooth without leaving your application. 

This setup is accomplished in two steps, using the BluetoothAdapter.

Get the BluetoothAdapter
The BluetoothAdapter is required for any and all Bluetooth activity. 
The BluetoothAdapter represents the device's own Bluetooth adapter (the Bluetooth radio). 
There's one Bluetooth adapter for the entire system, and your application can interact with it using this object. 


Enable Bluetooth
Next, you need to ensure that Bluetooth is enabled. Call isEnabled() to check whether Bluetooth is currently enabled. 
If this method returns false, then Bluetooth is disabled.
The following snippet checks whether Bluetooth is enabled. If it isn't, the snippet displays an error prompting 
the user to go to Settings to enable Bluetooth:


Note: The REQUEST_ENABLE_BT constant passed to startActivityForResult(android.content.Intent, int) is a locally-defined integer (which must be greater than 0) that the system passes back to you in your onActivityResult(int, int, android.content.Intent) implementation as the requestCode parameter.

Find BLE devices
To find BLE devices, you use the startLeScan() method. This method takes a BluetoothAdapter.LeScanCallback as a parameter. You must implement this callback, because that is how scan results are returned. Because scanning is battery-intensive, you should observe the following guidelines:

As soon as you find the desired device, stop scanning.
Never scan on a loop, and set a time limit on your scan.
A device that was previously available may have moved out of range, and continuing to scan drains the battery.


If you want to scan for only specific types of peripherals, you can instead call startLeScan(UUID[], BluetoothAdapter.LeScanCallback), 
providing an array of UUID objects that specify the GATT services your app supports.

Here is an implementation of the BluetoothAdapter.LeScanCallback, which is the interface used to deliver BLE scan results:


Note: You can only scan for Bluetooth LE devices or scan for Classic Bluetooth devices, as described in Bluetooth.
You cannot scan for both Bluetooth LE and classic devices at the same time.

Connect to a GATT server
The first step in interacting with a BLE device is connecting to it— more specifically, connecting to the GATT server on the device. 
To connect to a GATT server on a BLE device, you use the connectGatt() method. 
This method takes three parameters: a Context object, autoConnect (boolean indicating whether to automatically connect to the BLE device as soon 
as it becomes available), and a reference to a BluetoothGattCallback:



Read BLE attributes
Once your Android app has connected to a GATT server and discovered services, it can read and write attributes, where supported. For example, this snippet iterates through the server's services and characteristics and displays them in the UI:


(((FACOLTATIVO))) Receive GATT notifications
It's common for BLE apps to ask to be notified when a particular characteristic changes on the device. This snippet shows how to set a notification for a characteristic, using the setCharacteristicNotification() method:


Close the client app
Once your app has finished using a BLE device, it should call close() so the system can release resources appropriately:

